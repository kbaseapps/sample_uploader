# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class OntologyAPI(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login',
            service_ver='dev',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def get_descendants(self, GenericParams, context=None):
        """
        Retrieve descendants of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_descendants',
                                    [GenericParams], self._service_ver, context)

    def get_ancestors(self, GenericParams, context=None):
        """
        Retrieve ancestors of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_ancestors',
                                    [GenericParams], self._service_ver, context)

    def get_children(self, GenericParams, context=None):
        """
        Retrieve children of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_children',
                                    [GenericParams], self._service_ver, context)

    def get_parents(self, GenericParams, context=None):
        """
        Retrieve parents of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_parents',
                                    [GenericParams], self._service_ver, context)

    def get_related(self, GenericParams, context=None):
        """
        Retrieve related terms of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_related',
                                    [GenericParams], self._service_ver, context)

    def get_siblings(self, GenericParams, context=None):
        """
        Retrieve siblings terms of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_siblings',
                                    [GenericParams], self._service_ver, context)

    def get_terms(self, GetTermsParams, context=None):
        """
        Retrieve metadata of a list of ontology terms by IDs
        :param GetTermsParams: instance of type "GetTermsParams" (Parameters
           for get_terms ids - required - a list of ontology term id, such as
           '["GO:0000002", "GO:0000266"]' ts - optional - fetch documents
           with this active timestamp, defaults to now ns - optional -
           ontology namespace to use, defaults to "go" limit - optional -
           number of results to return (defaults to 20) offset - optional -
           number of results to skip (defaults to 0)) -> structure: parameter
           "ids" of list of type "ID" (Ontology term id, such as
           "GO:0000002"), parameter "ts" of Long, parameter "ns" of String,
           parameter "limit" of Long, parameter "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_terms',
                                    [GetTermsParams], self._service_ver, context)

    def get_hierarchical_ancestors(self, GenericParams, context=None):
        """
        Retrieve hierarchical_ancestors of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_hierarchical_ancestors',
                                    [GenericParams], self._service_ver, context)

    def get_hierarchical_children(self, GenericParams, context=None):
        """
        Retrieve hierarchical_children of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_hierarchical_children',
                                    [GenericParams], self._service_ver, context)

    def get_hierarchical_descendants(self, GenericParams, context=None):
        """
        Retrieve hierarchical_descendants of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_hierarchical_descendants',
                                    [GenericParams], self._service_ver, context)

    def get_hierarchical_parents(self, GenericParams, context=None):
        """
        Retrieve hierarchical_parents of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_hierarchical_parents',
                                    [GenericParams], self._service_ver, context)

    def get_associated_ws_genomes(self, GenericParams, context=None):
        """
        Retrieve associated workspace genome objects of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GetAssociatedWSObjectsResults" (Results
           from get_associated_ws_objects stats - Query execution information
           from ArangoDB. results - array of WSObjectsResults objects. ts -
           Timestamp used in the request ns - Ontology namespace used in the
           request. total_count - total count of associated workspace
           objects) -> structure: parameter "stats" of unspecified object,
           parameter "results" of list of type "WSObjectsWithFeatureCount"
           (Workspace obj with count of associated workspace genome features
           feature_count - count of features associated. ws_obj - WSObj
           object) -> structure: parameter "feature_count" of Long, parameter
           "ws_obj" of type "WSObj" (workspace object) -> structure:
           parameter "workspace_id" of Long, parameter "object_id" of Long,
           parameter "version" of Long, parameter "name" of String, parameter
           "ts" of Long, parameter "ns" of String, parameter "total_count" of
           Long
        """
        return self._client.run_job('OntologyAPI.get_associated_ws_genomes',
                                    [GenericParams], self._service_ver, context)

    def get_associated_ws_features(self, GetAssociatedWSFeaturesParams, context=None):
        """
        Retrieve associated workspace genome features of an ontology term by ID and workspace obj_ref
        :param GetAssociatedWSFeaturesParams: instance of type
           "GetAssociatedWSFeaturesParams" (Parameters for
           get_terms_from_ws_feature id - required - ontology term id, such
           as "GO:0016209" obj_ref - optional - workspace object ref, such as
           "6976/926/2" ts - optional - fetch documents with this active
           timestamp, defaults to now ns - optional - ontology namespace to
           use, defaults to "go" limit - optional - number of results to
           return (defaults to 20) offset - optional - number of results to
           skip (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "obj_ref" of
           String, parameter "ns" of String, parameter "ts" of Long,
           parameter "limit" of Long, parameter "offset" of Long
        :returns: instance of type "GetAssociatedWSFeaturesResults" (Results
           from get_associated_ws_features stats - Query execution
           information from ArangoDB. results - array of WSObjectsResults
           objects. ts - Timestamp used in the request ns - Ontology
           namespace used in the request. total_count - total count of
           associated workspace features) -> structure: parameter "stats" of
           unspecified object, parameter "results" of list of type
           "WSObjWithWSFeatures" (Workspace obj with associated workspace
           genome features ws_obj - WSObj object features - a list of
           FeatureLite object) -> structure: parameter "ws_obj" of type
           "WSObj" (workspace object) -> structure: parameter "workspace_id"
           of Long, parameter "object_id" of Long, parameter "version" of
           Long, parameter "name" of String, parameter "features" of list of
           type "FeatureLite" (workspace genome feature, lite version) ->
           structure: parameter "feature_id" of String, parameter
           "updated_at" of Long, parameter "ts" of Long, parameter "ns" of
           String, parameter "total_count" of Long
        """
        return self._client.run_job('OntologyAPI.get_associated_ws_features',
                                    [GetAssociatedWSFeaturesParams], self._service_ver, context)

    def get_terms_from_ws_feature(self, GetTermsFromWSFeatureParams, context=None):
        """
        Retrieve ontology terms of an workspace genome feature by workspace obj_ref and feature id
        :param GetTermsFromWSFeatureParams: instance of type
           "GetTermsFromWSFeatureParams" (Parameters for
           get_terms_from_ws_feature obj_ref - required - workspace object
           ref, such as "6976/926/2" feature_id - required - workspace
           feature id, such as "b3908" ts - optional - fetch documents with
           this active timestamp, defaults to now ns - optional - ontology
           namespace to use, defaults to "go" limit - optional - number of
           results to return (defaults to 20) offset - optional - number of
           results to skip (defaults to 0)) -> structure: parameter "obj_ref"
           of String, parameter "feature_id" of String, parameter "ns" of
           String, parameter "ts" of Long, parameter "limit" of Long,
           parameter "offset" of Long
        :returns: instance of type "GetTermsFromWSFeatureResults" (Results
           from get_terms_from_ws_feature stats - Query execution information
           from ArangoDB. results - array of TermsWithWSFeature objects. ts -
           Timestamp used in the request ns - Ontology namespace used in the
           request.) -> structure: parameter "stats" of unspecified object,
           parameter "results" of list of type "TermsWithWSFeature" (Ontology
           terms with associated workspace genome feature terms - a list of
           Term object feature - Feature object) -> structure: parameter
           "terms" of list of type "Term" (Ontology term) -> structure:
           parameter "id" of type "ID" (Ontology term id, such as
           "GO:0000002"), parameter "name" of String, parameter "namespace"
           of String, parameter "alt_ids" of list of String, parameter "def"
           of unspecified object, parameter "comments" of list of String,
           parameter "synonyms" of list of unspecified object, parameter
           "xrefs" of list of unspecified object, parameter "created" of
           Long, parameter "expired" of Long, parameter "feature" of type
           "Feature" (workspace genome feature) -> structure: parameter
           "feature_id" of String, parameter "updated_at" of Long, parameter
           "workspace_id" of Long, parameter "object_id" of Long, parameter
           "version" of Long, parameter "ts" of Long, parameter "ns" of String
        """
        return self._client.run_job('OntologyAPI.get_terms_from_ws_feature',
                                    [GetTermsFromWSFeatureParams], self._service_ver, context)

    def get_terms_from_ws_object(self, GetTermsFromWSObjParams, context=None):
        """
        Retrieve ontology terms of an workspace object by workspace obj_ref
        :param GetTermsFromWSObjParams: instance of type
           "GetTermsFromWSObjParams" (Parameters for get_terms_from_ws_object
           obj_ref - required - workspace object ref, such as "6976/926/2" ts
           - optional - fetch documents with this active timestamp, defaults
           to now ns - optional - ontology namespace to use, defaults to "go"
           limit - optional - number of results to return (defaults to 20)
           offset - optional - number of results to skip (defaults to 0)) ->
           structure: parameter "obj_ref" of String, parameter "ns" of
           String, parameter "ts" of Long, parameter "limit" of Long,
           parameter "offset" of Long
        :returns: instance of type "GetTermsFromWSObjResults" (Results from
           get_terms_from_ws_obj stats - Query execution information from
           ArangoDB. results - array of TermsWithWSFeature objects. ts -
           Timestamp used in the request ns - Ontology namespace used in the
           request.) -> structure: parameter "stats" of unspecified object,
           parameter "results" of list of type "TermsWithWSFeature" (Ontology
           terms with associated workspace genome feature terms - a list of
           Term object feature - Feature object) -> structure: parameter
           "terms" of list of type "Term" (Ontology term) -> structure:
           parameter "id" of type "ID" (Ontology term id, such as
           "GO:0000002"), parameter "name" of String, parameter "namespace"
           of String, parameter "alt_ids" of list of String, parameter "def"
           of unspecified object, parameter "comments" of list of String,
           parameter "synonyms" of list of unspecified object, parameter
           "xrefs" of list of unspecified object, parameter "created" of
           Long, parameter "expired" of Long, parameter "feature" of type
           "Feature" (workspace genome feature) -> structure: parameter
           "feature_id" of String, parameter "updated_at" of Long, parameter
           "workspace_id" of Long, parameter "object_id" of Long, parameter
           "version" of Long, parameter "ts" of Long, parameter "ns" of String
        """
        return self._client.run_job('OntologyAPI.get_terms_from_ws_object',
                                    [GetTermsFromWSObjParams], self._service_ver, context)

    def get_associated_samples(self, GenericParams, context=None):
        """
        Retrieve associated samples of an ontology term by ID
        :param GenericParams: instance of type "GenericParams" (Generic
           Parameters id - required - ontology term id, such as "GO:0016209"
           ts - optional - fetch documents with this active timestamp,
           defaults to now ns - optional - ontology namespace to use,
           defaults to "go" limit - optional - number of results to return
           (defaults to 20) offset - optional - number of results to skip
           (defaults to 0)) -> structure: parameter "id" of type "ID"
           (Ontology term id, such as "GO:0000002"), parameter "ts" of Long,
           parameter "ns" of String, parameter "limit" of Long, parameter
           "offset" of Long
        :returns: instance of type "GetAssociatedSamplesResults" (Results
           from get_associated_samples stats - Query execution information
           from ArangoDB. results - array of SampleWithMetadataKey objects.
           ts - Timestamp used in the request ns - Ontology namespace used in
           the request. total_count - total count of associated samples) ->
           structure: parameter "stats" of unspecified object, parameter
           "results" of list of type "SampleWithMetadataKey" (Sample data
           with sample_metadata_key id - sample id name - sample name
           node_tree - sample metadata save_date - sample data saved date
           version - sample data version sample_metadata_key - metadata key
           referencing ontology term) -> structure: parameter "id" of String,
           parameter "name" of String, parameter "node_tree" of unspecified
           object, parameter "save_date" of Long, parameter "version" of
           Long, parameter "sample_metadata_key" of String, parameter "ts" of
           Long, parameter "ns" of String, parameter "total_count" of Long
        """
        return self._client.run_job('OntologyAPI.get_associated_samples',
                                    [GenericParams], self._service_ver, context)

    def get_term_by_name(self, GetTermByNameParams, context=None):
        """
        Retrieve ontology term by name
        :param GetTermByNameParams: instance of type "GetTermByNameParams"
           (Parameters for get_term_by_name name - required - ontology name
           for search, such as "terrestrial biome" ancestor_term - optional -
           ontology term id of an ancestor ontology node ts - optional -
           fetch documents with this active timestamp, defaults to now ns -
           optional - ontology namespace to use, defaults to "go" limit -
           optional - number of results to return (defaults to 20) offset -
           optional - number of results to skip (defaults to 0)) ->
           structure: parameter "name" of String, parameter "ancestor_term"
           of type "ID" (Ontology term id, such as "GO:0000002"), parameter
           "ts" of Long, parameter "ns" of String, parameter "limit" of Long,
           parameter "offset" of Long
        :returns: instance of type "GenericResults" (Generic results stats -
           Query execution information from ArangoDB. results - array of
           objects of results. ts - Timestamp used in the request ns -
           Ontology namespace used in the request.) -> structure: parameter
           "stats" of unspecified object, parameter "results" of list of
           unspecified object, parameter "ts" of Long, parameter "ns" of
           String
        """
        return self._client.run_job('OntologyAPI.get_term_by_name',
                                    [GetTermByNameParams], self._service_ver, context)

    def get_namespaces(self, context=None):
        """
        :returns: instance of type "GetNamespacesResults" -> structure:
           parameter "namespaces" of unspecified object
        """
        return self._client.run_job('OntologyAPI.get_namespaces',
                                    [], self._service_ver, context)

    def status(self, context=None):
        return self._client.run_job('OntologyAPI.status',
                                    [], self._service_ver, context)
